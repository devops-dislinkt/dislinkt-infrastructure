version: '3.9'

services:
  # Post server
  post-server:
    build:
      context: ../user-post
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - 8070:8070
    expose:
      - 8070
    networks:
      - post-server-net
      - kafka-net
      - api-gateway-net
    depends_on:
        kafka1:
          condition: service_healthy
        post-server-db:
          condition: service_started
    environment:
      - FLASK_DATABASE_HOST=post-server-db
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - KAFKA=kafka1:9092
      - KAFKA_TOPIC=${KAFKA_NOT_TOPIC}
      - PYTHONUNBUFFERED=1
    volumes:
      - ../user-post:/code

  post-server-db:
    image: "mongo"
    command: mongod --port 27018
    ports:
        - '27018:27018'
    networks:
      - post-server-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - post-server-db-data:/foo

  post-server-db-import-data:
    image: "mongo"
    volumes:
      - ./data:/data
    depends_on:
      - post-server-db
    command: /data/post-server-import.sh

  # Auth server
  auth-server:
    build:
      context: ../dislinkt-auth
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - 8090:8090
    expose:
      - 8090
    networks:
      - auth-server-net
      - kafka-net
      - api-gateway-net
    depends_on:
      - kafka1
      - auth-server-db
    environment:
      - FLASK_DATABASE_HOST=auth-server-db
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - KAFKA=kafka1:9092
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - PYTHONUNBUFFERED=1
    volumes:
      - ../dislinkt-auth:/code

  auth-server-db:
    image: "mongo"
    ports:
      - 27017:27017
    networks:
      - auth-server-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - auth-server-db-data:/foo
  
  auth-server-db-import-data:
    image: "mongo"
    volumes:
      - ./data:/data
    depends_on:
      - auth-server-db
    command: /data/auth-server-import.sh

  # User profile server
  user-profile:
    build:
      context: ../user-profile
      dockerfile: Dockerfile
    image:  specnazm/dislinkt-user-profile:latest
    restart: on-failure
    networks:
      - user-profile-net
      - kafka-net
      - api-gateway-net
    ports:
      - "5000:5000"
    environment:
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_DOMAIN=${DATABASE_DOMAIN}
      - DATABASE_SCHEMA=${DATABASE_SCHEMA}
      - DATABASE_PORT=${DATABASE_PORT}
      - KAFKA1=kafka1:9092
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - FLASK_APP=user_profile_service
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
    depends_on:
      user-profile-db:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    volumes:
      - ../user-profile:/home/service


  user-profile-db:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    networks:
      - user-profile-net
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
    volumes:
      - db-data:/var/lib/postgresql/data
    user: postgres


#Messaging-service
  messages:
    build:
      context: ../messaging
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - api-gateway-net
    ports:
      - 8092:8092
    environment:
      - FLASK_APP=app
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
    volumes:
      - ../messaging:/home/service


#Notifications-service
  notifications:
    build:
      context: ../notifications
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - notifications-net
      - kafka-net
      - api-gateway-net
    ports:
      - 8091:8091
    environment:
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_DOMAIN=${DATABASE_DOMAIN_NOT}
      - DATABASE_SCHEMA=${DATABASE_SCHEMA_NOT}
      - DATABASE_PORT=${DATABASE_PORT}
      - KAFKA1=kafka1:9092
      - KAFKA_TOPIC=${KAFKA_NOT_TOPIC}
      - FLASK_APP=app
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - SERVICE_HOST=user-profile
      - SERVICE_PORT=5000
    depends_on:
      notification-db:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    volumes:
      - ../notifications:/home/service


  notification-db:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    networks:
      - notifications-net
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB_NOT}
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 5s
      timeout: 10s
      retries: 120
    volumes:
      - db-data-notif:/var/lib/postgresql/data
    user: postgres

  zoo:
    image: zookeeper:3.4.9
    container_name: zoo
    restart: on-failure
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - zoo:/data
      - zoolog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.3.1
    restart: on-failure
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zoo:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net
    depends_on:
      - zoo
    healthcheck:
      test: nc -z localhost 9092
      interval: 10s
      timeout: 60s
      retries: 3
    volumes:
      - kafka1:/var/lib/kafka/data

  api-gateway:
    build:
      context: ../api-gateway
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - api-gateway-net
    ports:
      - 8080:8080
    depends_on:
      - user-profile
      - auth-server

volumes:
  auth-server-db-data:
    name: auth-server-db-data
  post-server-db-data:
    name: post-server-db-data
  db-data:
    name: user-profile-data
  zoo:
    name: zoo-data
  zoolog:
    name: zoolog-data
  kafka1:
    name: kafka1-data
  db-data-notif:
    name: db-data-notif

networks:
  user-profile-net:
    name: user-profile-net
    driver: bridge
  kafka-net:
    driver: bridge
  auth-server-net:
    driver: bridge
  post-server-net:
    driver: bridge
  api-gateway-net:
    driver: bridge
  notifications-net:
    driver: bridge